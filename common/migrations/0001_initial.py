# Generated by Django 4.1.7 on 2023-05-12 09:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessTimeOutLogs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('re_time', models.CharField(max_length=32, verbose_name='请求时间')),
                ('re_user', models.CharField(max_length=32, verbose_name='操作人')),
                ('re_ip', models.CharField(max_length=32, verbose_name='请求IP')),
                ('re_url', models.CharField(max_length=255, verbose_name='请求url')),
                ('re_method', models.CharField(max_length=11, verbose_name='请求方法')),
                ('re_content', models.TextField(null=True, verbose_name='请求参数')),
                ('rp_content', models.TextField(null=True, verbose_name='响应参数')),
                ('rp_code', models.TextField(null=True, verbose_name='响应码')),
                ('user_agent', models.TextField(null=True, verbose_name='请求浏览器')),
                ('access_time', models.IntegerField(verbose_name='响应耗时/ms')),
            ],
            options={
                'verbose_name': '平台超时操作日志表',
                'verbose_name_plural': '平台超时操作日志表',
                'db_table': 'ipam_access_timeout_logs',
            },
        ),
        migrations.CreateModel(
            name='OpLogs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('re_time', models.CharField(max_length=32, verbose_name='请求时间')),
                ('re_user', models.CharField(max_length=32, verbose_name='操作人')),
                ('re_ip', models.CharField(max_length=32, verbose_name='请求IP')),
                ('re_url', models.CharField(max_length=255, verbose_name='请求url')),
                ('re_method', models.CharField(max_length=11, verbose_name='请求方法')),
                ('re_content', models.TextField(null=True, verbose_name='请求参数')),
                ('rp_content', models.TextField(null=True, verbose_name='响应参数')),
                ('rp_code', models.TextField(null=True, verbose_name='响应码')),
                ('user_agent', models.TextField(null=True, verbose_name='请求浏览器')),
                ('access_time', models.IntegerField(verbose_name='响应耗时/ms')),
            ],
            options={
                'verbose_name': '平台操作日志表',
                'verbose_name_plural': '平台操作日志表',
                'db_table': 'ipam_op_logs',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('creator', models.IntegerField(null=True, verbose_name='creator')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modifier', models.IntegerField(null=True, verbose_name='modifier')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('avatar', models.CharField(blank=True, max_length=1000, verbose_name='头像')),
                ('nickname', models.CharField(blank=True, max_length=200, null=True, verbose_name='昵称')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'blog_user',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
